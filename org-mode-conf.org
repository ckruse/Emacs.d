#+TITLE: Christian's Org mode configuration
#+STARTUP: content


* Org mode configuration


** Enable org-mode for =.org= and =.org_archive= files

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
#+end_src

** Basic configuration

Including font lock and directories

#+begin_src emacs-lisp
  (setq org-directory "~/Documents/org")
  (setq org-mobile-directory "/scp:nginx@cloud.defunct.ch:/var/www/org-mobile/")
  (setq org-agenda-files (quote ("~/Documents/org/inbox.org"
                                 "~/Documents/org/priv/projects.org"
                                 "~/Documents/org/priv/todo.org"
                                 "~/Documents/org/priv/notes.org"
                                 "~/Documents/org/work/termitel.org"
                                 "~/Documents/org/work/termitel-someday.org")))
  (setq org-mobile-inbox-for-pull "~/Documents/org/inbox.org")
  (setq org-default-notes-file (concat org-directory "/inbox.org"))

  (setq org-log-into-drawer t)

  (setq org-agenda-start-with-follow-mode t)

  (add-hook 'org-mode-hook 'turn-on-font-lock)

  (use-package org-bullets
    :ensure t
    :commands org-bullets-mode
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src


** Keywords, states and triggers

#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"
                          "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))

  ;; use C-c C-t <KEY> for fast selection of todo state
  (setq org-use-fast-todo-selection t)

  (setq org-treat-S-cursor-todo-selection-as-state-change nil)


  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+end_src

** Capturing templates

#+begin_src emacs-lisp
  (setq org-capture-templates
        (quote (("t" "todo" entry (file+headline "~/Documents/org/inbox.org" "Inbox")
                 "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                ("n" "note" entry (file+headline "~/Documents/org/notes.org" "Notizen")
                 "* %?\n%U\n" :clock-in t :clock-resume t)
                ("w" "blog entry" entry (file+headline "~/Documents/org/inbox.org" "Inbox")
                 "* TODO %? :blog:\n%U\n" :clock-in t :clock-resume t)
                ("j" "Journal" entry (file+datetree "~/Documents/org/priv/diary.org")
                 "* %?\n%U\n" :clock-in t :clock-resume t)
                ("k" "Körpermaße" entry (file+datetree "~/Documents/org/priv/measurements.org")
                 "* %?\n%U\n")
                ("m" "Meeting" entry (file+headline "~/Documents/org/inbox.org" "Inbox")
                 "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                ("c" "Phone call" entry (file+headline "~/Documents/org/inbox.org" "Inbox")
                 "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                ("p" "password" entry (file "~/Documents/org/passwords.gpg")
                 "* %^{Title}\n  %^{URL}p %^{USERNAME}p %^{PASSWORD}p"))))
#+end_src

** Effort calculation / clock setup

#+begin_src emacs-lisp
  ;; ; Set default column view headings: Task Effort Clock_Summary
  ;; (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
  ;; ; global Effort estimate values
  ;; ; global STYLE property values for completion
  ;; (setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
  ;;                                     ("STYLE_ALL" . "habit"))))

  ;; ;; Remove empty LOGBOOK drawers on clock out
  ;; (defun bh/remove-empty-drawer-on-clock-out ()
  ;;   (interactive)
  ;;   (save-excursion
  ;;     (beginning-of-line 0)
  ;;     (org-remove-empty-drawer-at (point))))

  ;; (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)

  ;; ;;;;;;;;;;;;;;;;;
  ;; ;; clock setup ;;
  ;; ;;;;;;;;;;;;;;;;;

  ;; ;;
  ;; ;; Resume clocking task when emacs is restarted
  ;; (org-clock-persistence-insinuate)
  ;; ;;
  ;; ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
  ;; (setq org-clock-history-length 23)
  ;; ;; Resume clocking task on clock-in if the clock is open
  ;; (setq org-clock-in-resume t)
  ;; ;; Change tasks to NEXT when clocking in
  ;; (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
  ;; ;; Separate drawers for clocking and logs
  ;; (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  ;; ;; Save clock data and state changes and notes in the LOGBOOK drawer
  ;; (setq org-clock-into-drawer t)
  ;; ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  ;; (setq org-clock-out-remove-zero-time-clocks t)
  ;; ;; Clock out when moving task to a done state
  ;; (setq org-clock-out-when-done t)
  ;; ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  ;; (setq org-clock-persist t)
  ;; ;; Do not prompt to resume an active clock
  ;; (setq org-clock-persist-query-resume nil)
  ;; ;; Enable auto clock resolution for finding open clocks
  ;; (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; ;; Include current clocking task in clock reports
  ;; (setq org-clock-report-include-clocking-task t)

  ;; (setq bh/keep-clock-running nil)

  ;; (defvar bh/organization-task-id "9a1ade75-b3d0-43aa-b492-90f468182345")

  ;; (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)
#+end_src

** Export configuration

#+begin_src emacs-lisp
  (setq org-alphabetical-lists t)

  (setq org-html-inline-images t)
  ; Export with LaTeX fragments
  (setq org-export-with-LaTeX-fragments t)
  ; Increase default number of headings to export
  (setq org-export-headline-levels 6)
  ; disable sup/sub scripts
  (setq org-use-sub-superscripts nil)

  (setq org-html-doctype "html5")
  (setq org-html-head-include-default-style nil)
  (setq org-html-validation-link nil)
  (setq org-html-link-home "https://cloud.defunct.ch/todo/")
  (setq org-html-home/up-format "<div id=\"org-div-home-and-up\">
 <a accesskey=\"h\" href=\"%s\">UP</a>
 <a accesskey=\"H\" href=\"%s\">Home</a>
</div>")

  ;;(setq debug-on-error t)
  (setq org-publish-project-alist
        ;
        ; Termitel Todo list
        ; org-mode-doc-org this document
        ; org-mode-doc-extra are images and css files that need to be included
        ; org-mode-doc is the top-level project that gets published
        ; This uses the same target directory as the 'doc' project
        (quote (("org"
                 :base-directory "~/Documents/org/"
                 :publishing-directory "/ssh:ckruse@cloud.defunct.ch:/home/ckruse/org-export/"
                 :recursive t
                 :section-numbers nil
                 :table-of-contents nil
                 :base-extension "org"
                 :publishing-function org-html-publish-to-html
                 :html-head "<link rel=\"stylesheet\" href=\"https://cloud.defunct.ch/todo/org.css\" type=\"text/css\">"
                 :plain-source t
                 :htmlized-source t
                 :style-include-default nil
                 :auto-sitemap t
                 :sitemap-filename "index.html"
                 :sitemap-title "CKs Org"
                 :sitemap-style "tree"
                 :author-info t
                 :creator-info t
                 :exclude "passwords"))))
#+end_src

** Refiling setup

#+begin_src emacs-lisp
  (setq org-refile-targets (quote ((nil :maxlevel . 2)
                                   (org-agenda-files :maxlevel . 2))))
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  ;(setq org-completion-use-ido t)
#+end_src

** Helpers

#+begin_src emacs-lisp
    (defun bh/is-project-p ()
      "Any task with a todo keyword subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task has-subtask))))

    (defun bh/is-project-subtree-p ()
      "Any task with a todo keyword that is in a project subtree.
    Callers of this function already widen the buffer view."
      (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                  (point))))
        (save-excursion
          (bh/find-project-task)
          (if (equal (point) task)
              nil
            t))))

    (defun bh/is-task-p ()
      "Any task with a todo keyword and no subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task (not has-subtask)))))

    (defun bh/is-subproject-p ()
      "Any task which is a subtask of another project"
      (let ((is-subproject)
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (while (and (not is-subproject) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq is-subproject t))))
        (and is-a-task is-subproject)))

    (defun bh/list-sublevels-for-projects-indented ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels 'indented)
        (setq org-tags-match-list-sublevels nil))
      nil)

    (defun bh/list-sublevels-for-projects ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels t)
        (setq org-tags-match-list-sublevels nil))
      nil)

    (defvar bh/hide-scheduled-and-waiting-next-tasks t)

    (defun bh/toggle-next-task-display ()
      (interactive)
      (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
      (when  (equal major-mode 'org-agenda-mode)
        (org-agenda-redo))
      (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

    (defun bh/skip-stuck-projects ()
      "Skip trees that are not stuck projects"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (if (bh/is-project-p)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (has-next ))
                (save-excursion
                  (forward-line 1)
                  (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                    (unless (member "WAITING" (org-get-tags-at))
                      (setq has-next t))))
                (if has-next
                    nil
                  next-headline)) ; a stuck project, has subtasks but no next task
            nil))))

    (defun bh/skip-non-stuck-projects ()
      "Skip trees that are not stuck projects"
      ;; (bh/list-sublevels-for-projects-indented)
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (if (bh/is-project-p)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (has-next ))
                (save-excursion
                  (forward-line 1)
                  (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                    (unless (member "WAITING" (org-get-tags-at))
                      (setq has-next t))))
                (if has-next
                    next-headline
                  nil)) ; a stuck project, has subtasks but no next task
            next-headline))))

    (defun bh/skip-non-projects ()
      "Skip trees that are not projects"
      ;; (bh/list-sublevels-for-projects-indented)
      (if (save-excursion (bh/skip-non-stuck-projects))
          (save-restriction
            (widen)
            (let ((subtree-end (save-excursion (org-end-of-subtree t))))
              (cond
               ((bh/is-project-p)
                nil)
               ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
                nil)
               (t
                subtree-end))))
        (save-excursion (org-end-of-subtree t))))

    (defun bh/skip-project-trees-and-habits ()
      "Skip trees that are projects"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-projects-and-habits-and-single-tasks ()
      "Skip trees that are projects, tasks that are habits, single non-project tasks"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((org-is-habit-p)
            next-headline)
           ((and bh/hide-scheduled-and-waiting-next-tasks
                 (member "WAITING" (org-get-tags-at)))
            next-headline)
           ((bh/is-project-p)
            next-headline)
           ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
            next-headline)
           (t
            nil)))))

    (defun bh/skip-project-tasks-maybe ()
      "Show tasks related to the current restriction.
    When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
    When not restricted, skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
               (next-headline (save-excursion (or (outline-next-heading) (point-max))))
               (limit-to-project (marker-buffer org-agenda-restrict-begin)))
          (cond
           ((bh/is-project-p)
            next-headline)
           ((org-is-habit-p)
            subtree-end)
           ((and (not limit-to-project)
                 (bh/is-project-subtree-p))
            subtree-end)
           ((and limit-to-project
                 (bh/is-project-subtree-p)
                 (member (org-get-todo-state) (list "NEXT")))
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-project-tasks ()
      "Show non-project tasks.
    Skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           ((bh/is-project-subtree-p)
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-non-project-tasks ()
      "Show project tasks.
    Skip project and sub-project tasks, habits, and loose non-project tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
               (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((bh/is-project-p)
            next-headline)
           ((org-is-habit-p)
            subtree-end)
           ((and (bh/is-project-subtree-p)
                 (member (org-get-todo-state) (list "NEXT")))
            subtree-end)
           ((not (bh/is-project-subtree-p))
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-projects-and-habits ()
      "Skip trees that are projects and tasks that are habits"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))

    (defun bh/skip-non-subprojects ()
      "Skip trees that are not projects"
      (let ((next-headline (save-excursion (outline-next-heading))))
        (if (bh/is-subproject-p)
            nil
          next-headline)))

    (defun bh/clock-in-to-next (kw)
      "Switch a task from TODO to NEXT when clocking in.
    Skips capture tasks, projects, and subprojects.
    Switch projects and subprojects from NEXT back to TODO"
      (when (not (and (boundp 'org-capture-mode) org-capture-mode))
        (cond
         ((and (member (org-get-todo-state) (list "TODO"))
               (bh/is-task-p))
          "NEXT")
         ((and (member (org-get-todo-state) (list "NEXT"))
               (bh/is-project-p))
          "TODO"))))

    (defun bh/find-project-task ()
      "Move point to the parent (project) task if any"
      (save-restriction
        (widen)
        (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (goto-char parent-task)
          parent-task)))

    (defun bh/punch-in (arg)
      "Start continuous clocking and set the default task to the
    selected task.  If no task is selected set the Organization task
    as the default task."
      (interactive "p")
      (setq bh/keep-clock-running t)
      (if (equal major-mode 'org-agenda-mode)
          ;;
          ;; We're in the agenda
          ;;
          (let* ((marker (org-get-at-bol 'org-hd-marker))
                 (tags (org-with-point-at marker (org-get-tags-at))))
            (if (and (eq arg 4) tags)
                (org-agenda-clock-in '(16))
              (bh/clock-in-organization-task-as-default)))
        ;;
        ;; We are not in the agenda
        ;;
        (save-restriction
          (widen)
          ; Find the tags on the current task
          (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
              (org-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))))

    (defun bh/punch-out ()
      (interactive)
      (setq bh/keep-clock-running nil)
      (when (org-clock-is-active)
        (org-clock-out))
      (org-agenda-remove-restriction-lock))

    (defun bh/clock-in-default-task ()
      (save-excursion
        (org-with-point-at org-clock-default-task
          (org-clock-in))))

    (defun bh/clock-in-parent-task ()
      "Move point to the parent (project) task if any and clock in"
      (let ((parent-task))
        (save-excursion
          (save-restriction
            (widen)
            (while (and (not parent-task) (org-up-heading-safe))
              (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
                (setq parent-task (point))))
            (if parent-task
                (org-with-point-at parent-task
                  (org-clock-in))
              (when bh/keep-clock-running
                (bh/clock-in-default-task)))))))

    (defun bh/clock-in-organization-task-as-default ()
      (interactive)
      (org-with-point-at (org-id-find bh/organization-task-id 'marker)
        (org-clock-in '(16))))

    (defun bh/clock-out-maybe ()
      (when (and bh/keep-clock-running
                 (not org-clock-clocking-in)
                 (marker-buffer org-clock-default-task)
                 (not org-clock-resolving-clocks-due-to-idleness))
        (bh/clock-in-parent-task)))

#+end_src

** Automatically clock in

#+begin_src emacs-lisp
  ;(run-with-idle-timer 5 nil 'bh/clock-in-organization-task-as-default)
#+end_src

** Automatically open the agenda

I always forget to open up the agenda, so open it automatically when
idle for 2 minutes

#+begin_src emacs-lisp
  ;; (defun jump-to-org-agenda ()
  ;;   (interactive)
  ;;   (let ((buf (get-buffer "*Org Agenda*"))
  ;;         wind)
  ;;     (if buf
  ;;         (if (setq wind (get-buffer-window buf))
  ;;             (select-window wind)
  ;;           (if (called-interactively-p)
  ;;               (progn
  ;;                 (select-window (display-buffer buf t t))
  ;;                 (org-fit-window-to-buffer))
  ;;             (with-selected-window (display-buffer buf)
  ;;               (org-fit-window-to-buffer))))
  ;;       (call-interactively 'org-todo-list))))

  ;; (run-with-idle-timer 60 t 'jump-to-org-agenda)
#+end_src

** list all org tags

#+begin_src emacs-lisp
  (defun ck/org-tags ()
    (interactive)
    (get-buffer-create "*org-tags*")
    (set-buffer "*org-tags*")
    (org-mode)
    (let ((tags (sort (delete-dups (apply 'append (delete-dups (org-map-entries (lambda () org-scanner-tags) t 'agenda)))) 'string<)))
      (dolist (tag tags)
        (insert (concat "[[elisp:(org-tags-view nil \"" tag "\")][" tag  "]]\n"))))
    (beginning-of-buffer)
    (switch-to-buffer "*org-tags*"))
#+end_src

** custom agendas

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("f" "FLOSS" tags-todo ":private:foss:"
           ((org-agenda-overriding-header "FLOSS")))
          ("t" "Priv-TODOs" tags-todo ":private:todo:"
           ((org-agenda-overriding-header "Priv-TODOs")))
          ("w" "Work todos" tags-todo "+work+termitel-someday-ettlingen"
           ((org-agenda-overriding-header "Work todos")))
          ("s" "Work todos: someday" tags-todo "+work+termitel+someday-ettlingen"
           ((org-agenda-overriding-header "Work todos: someday")))
          ("e" "Work todos: Ettlingen" tags-todo "+work+termitel+ettlingen"
           ((org-agenda-overriding-header "Work todos: Ettlingen")))))

#+end_src

** A hydra for global key bindings regarding org

#+begin_src emacs-lisp
  (define-key ck/keys-minor-mode-map "\C-cco"
    (defhydra org (:color blue)
      "org actions"
      ("a" org-agenda "Agenda")
      ("l" org-store-link "Store link")
      ("b" org-iswitchb "Org switch buffer")
      ("A" org-archive-subtree "Archive subtree" :color red)

      ("c" org-capture "Capture")
      ("i" bh/punch-in "Punch in")
      ("o" bh/punch-out "Punch out")

      ("g" org-clock-goto "Goto clock")
      ("I" org-clock-in "Clock in")
      ("p" org-publish-all "Publish")
      ("t" ck/org-tags "list tags")))

#+end_src

